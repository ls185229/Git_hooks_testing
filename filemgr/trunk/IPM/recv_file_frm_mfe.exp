#!/usr/bin/expect
#/clearing/filemgr/.profile

################################################################################
# $Id: recv_file_frm_mfe.exp 4315 2017-08-28 18:24:33Z fcaron $
# $Rev: 4315 $
################################################################################
#
# File Name:  recv_file_frm_mfe.exp
#
# Description:  This script downloads and archives the daily MasterCard reports
#               files.
#
# Script Arguments:  None.
#
# Output:  Daily MasterCard reports files.
#
# Return:   0 = Success
#          !0 = Exit with errors
#
# Notes:  None.
#
################################################################################

#System variables
set box $env(SYS_BOX)
set sysinfo "System: $box\n Location: $env(PWD) \n\n"

#Global variables
global argv
global flist
set curdate [clock seconds]
set run_date [clock format $curdate -format "%Y%m%d"]
set run_time [clock format $curdate -format "%H%M%S"]
set IP_ADDR $env(FILE_XCHNGR_MC)
set USERNAME $env(FILE_XCHNGR_MC_USERNAME)
set PASSWORD $env(FILE_XCHNGR_MC_PASSWORD)

#set IP_ADDR "dfw-qa-sim-01.corp.jetpay.com"
#set USERNAME "filemgr"
#set PASSWORD "\$u3_veRe"

################################################################################
#
# Procedure Name:  bailout
#
# Description:     Exit the application due to error
# Error Return:    1 [Script error]
#
################################################################################
proc bailout {error_code} {

    send "bye\r"
    expect {
        "221 Session terminated" {exec sleep 2; exit $error_code}
        timeout                  {exit 99}
    }
    set return_code 1
    exit $return_code

};# end bailout


##########
## MAIN ##
##########
send_user "______________________________________________________ \n"
send_user "$run_date $run_time Beginning MasterCard reports files download(s) \n"

set timeout 300
spawn ftp $IP_ADDR 8021
set timeout 30
set return_code 0

#
# Connect to the transfer box
#
while 1 { expect {
    "Name*:"        {send "$USERNAME\r"}
    "*rd:"          {send "$PASSWORD\r"}
    "*ftp>"         {send_user "$run_date $run_time Logon to transfer box \n";sleep 2; break}
    timeout         {send_user "$run_date $run_time Logon to transfer box timed out \n"; bailout 1}
}}

#
# Download the BIN file
#
send "cd PRODUCTION/MASTERCARD/T140 \r"

while 1 { expect {
    "*ftp>"         {send_user "$run_date $run_time Directory changed to PRODUCTION/MASTERCARD/T140 \n";sleep 2; break}
    timeout         {send_user "$run_date $run_time Directory change to PRODUCTION/MASTERCARD/T140 timed out \n"; bailout 2}
}}

send "binary \r"
while 1 { expect {
    "*ftp>"         {send_user "$run_date $run_time Change to binary mode \n";sleep 2; break}
    timeout         {send_user "$run_date $run_time Change to binary mode timed out \n"; bailout 2}
}}

set flist {}

exec sleep 5
set timeout 30
## Find the downloaded file for the run_date
send "ls \r"

while 1 { expect {
    "*ftp>"         {send_user "Getting File List \n";sleep 2; break}
    timeout         {send_user "Getting File List timed out \n"; bailout 2}
}}

set file_list $expect_out(buffer)
#puts "file_list = $file_list"

sleep 2
### Start parsing the files into a new list
foreach file $file_list {
   if { [string match "TT140*" $file] } {
       lappend flist $file
       send "get $file \r"
       while 1 { expect {
           "Fetching*"           {send_user "File found, Transfering \n"}
           "File * not found."   {send_user "File not found, exiting \n"; break}
           "*ftp>"               {send_user "FILE TRANSFERED \n"; break}
           timeout               {send_user "Problem transferring file\n"; bailout 2}
       }}
   }
}

#exec sleep 5
#set timeout  30
#send "mget TT140* \r"
#while 1 { expect {
#    "*ftp>"         {send_user "$run_date $run_time MasterCard reports files downloaded \n";sleep 2; break}
#    "mget*/?"       {send "y\r";sleep 2}
#    timeout         {send_user "$run_date $run_time MasterCard reports files download timed out \n"; bailout 2}
#}}

#
# Move the BIN file to the transfer file archive location
#
#send "cd ../../ARCHIVE/MCARCHIVE/T140 \r"

#while 1 { expect {
#    "*ftp>"         {send_user "$run_date $run_time Directory changed to PRODUCTION/ARCHIVE/MCARCHIVE/T140 \n";sleep 2; break}
#    timeout         {send_user "$run_date $run_time Directory change to PRODUCTION/ARCHIVE/MCARCHIVE/T140 timed out \n"; bailout 2}
#}}

#set timeout 30
#send "mput TT140* \r"
#while 1 { expect {
#    "*ftp>"         {send_user "$run_date $run_time MasterCard reports files moved to archive location \n";sleep 2; break}
#    "mput*\?"       {send "y\r";sleep 2}
#    timeout         {send_user "$run_date $run_time MasterCard reports files move to archive location timed out\n"; bailout 2}
#}}

#
# Move the BIN file from the transfer location
#
#send "cd ../../../PRODUCTION/MASTERCARD/T140 \r"
#while 1 { expect {
#    "*ftp>"         {send_user "$run_date $run_time Directory changed back to PRODUCTION/MASTERCARD/TT140 \n";sleep 2; break}
#    timeout         {send_user "$run_date $run_time Directory change back to PRODUCTION/MASTERCARD/TT140 timed out \n"; bailout 2}
#}}

#exec sleep 5
#set timeout 30
## Find the downloaded file for the run_date
#send "ls \r"

#while 1 { expect {
#    "*ftp>"         {send_user "Getting File List \n";sleep 2; break}
#    timeout         {send_user "Getting File List timed out \n"; bailout 2}
#}}

#set file_list $expect_out(buffer)
#puts "file_list = $file_list"

#sleep 2
### Start parsing the files into a new list
#foreach file $file_list {
#   if { [string match "TT140*" $file] } {
#       lappend flist $file
#       puts "file = $file \n"
#   }
#}

#puts "flist = $flist"

exec sleep 5
if {$flist != {} } {
    foreach file_2_move $flist {

    send "rename $file_2_move /PRODUCTION/ARCHIVE/MCARCHIVE/T140/$file_2_move \r"
    while 1 { expect {
        "*ftp>"         {send_user "Moving file to archive \n";sleep 2; break}
        timeout         {send_user "Moving file to archive timed out \n"; bailout 2}
    }}
  }
}


#set timeout 30
#send "mdelete TT140* \r"
#while 1 { expect {
#    "*ftp>"         {send_user "$run_date $run_time Deleted of MasterCard reports files from download directory \n";sleep 2; break}
#    "mdelete*\?"    {send "y\r";sleep 2}
#    timeout         {send_user "$run_date $run_time Delete of MasterCard reports files from download directory timed out\n"; bailout 2}
#}}

send_user "$run_date $run_time Logoff from transfer box \n"
send "quit\r"
send_user "$run_date $run_time Ending MasterCard reports files download \n"
send_user "$run_date $run_time MasterCard reports files retrieval process is complete \n"
send_user "\n"

exit $return_code
