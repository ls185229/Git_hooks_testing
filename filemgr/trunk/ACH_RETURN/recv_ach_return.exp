#!/usr/bin/expect -f
#
# ###############################################################################
# $Id: recv_ach_return.exp 4745 2018-10-12 21:09:48Z bjones $
# $Rev: 4745 $
# ###############################################################################
#
#  File Name:  recv_ach_return.exp YYYYMMDD
#
#  Description:  This script downloads the ach acknowlegement files (ACK), the
#                ach reports (RPT) and ach return files (RTN).
#
#  Script Arguments: date is optional defaults to today
#
#                    planned arguments (not yet implemented)
#                    -d = date in YYYYMMDD format (optional)
#                    -e = Email address to send error messages. (optional)
#                    -v = debug level. (optional)
#                    -t = test run option. (optional)
#
#  Output:  Files are placed in current directory.
#
#  Return:   0 = Success
#           !0 = Exit with errors
#
# ###############################################################################


lappend auto_path $env(MASCLR_LIB)
package require GetOpts 1.1

source $env(MASCLR_LIB)/masclr_tcl_lib
source $env(MASCLR_LIB)/mas_file_lib

set force_conservative 0  ;# set to 1 to force conservative mode even if
                          ;# script wasn't run conservatively originally
if {$force_conservative} {
    set send_slow {1 .1}
    proc send {ignore arg} {
        sleep .1
        exp_send -s -- $arg
    }
}

set logdate [clock seconds]
set curdate [clock format $logdate -format "%Y%m%d"]
set logdate [clock format $logdate -format "%Y/%m/%d-%H:%M:%S"]

source bmo_ach_return.cfg

# Procedure to try to exit the script cleanly
proc bailout {error_code} {
    send "bye\r"
    expect {
        "221 Session terminated" {exec sleep 2; exit $error_code}
        timeout                  {exit 99}
    }
    exit 99
};# end bailout

#**** Main Code Module ****

if {$argc == 1} {
    set dt [lindex $argv 0]
} else {
    set dt $curdate
}
puts "Running with date: $dt"

### set dt in yymmdd format###
# # set dt [string range $dt 2 end]

send_user "\n"
send_user "<> BEGIN transfering - Ach response file - DT $logdate for date-$dt \n"

set timeout 10
#spawn sftp -oIdentityFile=/clearing/filemgr/.ssh/id_rsa bmohdev@192.168.20.33
spawn $UPLOAD_CMD "$OPTION1 $OPTION2"  $USER@$DEST

set timeout 30

match_max 100000

while 1 { expect {
    "Name*:"    {send "$USERNAME\r"}
    "*rd:"      {send "$PASSWORD\r"}
    "*ftp>"     {send_user "\nLogin successful \n";sleep 2; break}
    timeout     {send_user "\nTimeout problem in login\n"; bailout 1}
}}

send -- "cd to_jetpay \r"

while 1 { expect {
    "*ftp>"     {send_user "\nDirectory change successful \n"; sleep 2; break}
    timeout     {send_user "\nTimeout problem in directory change\n"; bailout 1}
}}

send -- "ls -1  *$dt*\r"

while 1 { expect {
    "*ftp>"     {send_user "\nDirectory listing successful \n"; sleep 2; break}
    "*not found*" {
        send_user "\nNo matching files\n"
        bailout 0
    }
    timeout     {send_user "\nTimeout problem in directory listing\n"; bailout 1}
}}

set file_list [list]

foreach {file} [split $expect_out(buffer) \n] {
    if { [string range [string trim $file] 0 5] == $FILE_PATTERN } {
        lappend file_list [string trim $file \r]
    }
}

# puts "file_list: $file_list"

foreach {file} $file_list {
    # send_user "\nrename >>$file<< >>processed/$file<< \n"
    # sleep 5

    send -- "get $file \r"
    #sleep 5
    while 1 { expect {
        "*ftp>"     {sleep 2; send_user "\nFile downloaded successful \n"; break}
        "*not found*" {
            send_user "\nNo file matching $file\n"
            bailout 0
        }
        timeout     {send_user "\nTimeout problem in download\n"; bailout 1}
    }}

    send -- "rename $file processed/$file \r"
    #sleep 5
    while 1 { expect {
        "*ftp>"     {sleep 2; send_user "\nFile moved successful \n"; break}
        "*not found*" {
            send_user "\nNo file matching $file\n"
            bailout 0
        }
        timeout     {send_user "\nTimeout problem in rename\n"; bailout 1}
    }}
    # sleep 5
}

send_user "\n"
send_user "<> End transfering - Ach response file - DT $logdate for date-$dt \n"

exit 0
