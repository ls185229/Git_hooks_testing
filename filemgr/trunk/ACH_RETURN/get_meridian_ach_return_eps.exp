#!/usr/bin/env expect
#/clearing/filemgr/.profile


################################################################################
#
#    File Name - get_meridian_ach_return.exp
#
#    Description - The scripts does the followinng
#                  1- Download any JetPay or Revtrak ACH Return files
#                     from Meridian into the DNLOAD directory using sftp
#                  2- Rename the downloaded file with a date stamp = run date
#                     <fileName>-<run_date>
#                  3- Deletes the downloaded files from the remote box.
#                  4- Emails only the JetPay ACH Return files to the
#                     people concerned
#                  5- Keeps track of the files downloaded by writing to an
#                     output file. The output file is used by the parsing
#                     scripts for verifying file count (downloaded and parsed)
#                  6- Notify the calling shell script if there are no files
#                     to download
#                  7- Returns error code to the calling shell script when error
#
#    Arguments - $1 = Run date (YYYYMMDD) Optional, Defaults to current
#                     Uses this date to add date stamp to filename
#
#    Return - 0 = Success, file found and transfered
#             1 = sftp,login failure
#             2 = sftp, timeout
#             3 = sftp, file not found
#             4 = No downloads
#             5 = files not deleted, cleanup required
#             6 = Email error
#             7 = File open Error
#
#    Note - Invoke this script using the shell script
#           get_meridian_ach_return.sh for better logging/email functionality.
#
#
#
################################################################################# $Id: get_meridian_ach_return_eps.exp 4745 2018-10-12 21:09:48Z bjones $
# $Rev: 4745 $
# $Author: bjones $


## Enviornment Variable ##
##set box $env(SYS_BOX)
##set prod_db $env(IST_DB)
##set sysinfo "System: $box \nLocation: $env(PWD) \n\n"

## Global Variable ##
set USERNAME "meridian"
set DESTINATION_MACHINE "sftp.jetpay.com"
set base_name "get_meridian_ach_return"
set loc_path "/clearing/filemgr/ACH_RETURN"
set dnld_dir "$loc_path/DNLOAD"
set arcv_dir "$loc_path/ARCHIVE"
set result_file "$loc_path/achReturnDnld.result"

## Email attributes ##
set msubj "Jetpay-ACH-Returns" ; # T-1 spaces does not work
set email_list "notifications-clearing@jetpay.com apps@jetpayms.com mgage@jetpay.com"

set mbody_file "$loc_path/achbody.txt"

### File Name attributes
set file_mask "returns"
set files_to_xfer "*$file_mask*.*"
set rt_file_mask  "RevTrak_returns*"
set jp_file_mask  "Jetpay_returns*"
set match_len     7

################################################################################
#
#    Procedure Name - usage
#
#    Description - Print the script usage
#
###############################################################################
proc usage {} {
   global base_name

   puts "Usage: $base_name.exp <run_date YYYYMMDD>"
   puts "       run_date - Optional, date to stamp on the ACH File after"
   puts "                  its transfered (YYYYMMDD)"
   puts "                  Defaults to current date"
}


################################################################################
#
#    Procedure Name -  init
#
#    Description - Initialize program parameters
#
#    Return -
# RevTrak_returns_20110415.TXT
# Jetpay_returns_20110415.txt
#
###############################################################################
proc init {argc argv} {
   global base_name
   global run_date

   set initDnldCount    0
   set initDnldFileList ""

   if {$argc > 1} {
      puts "Usage Err: Wrong number of arguments passed\n"
      usage
      exit 1
   }

   if { $argc == 1} {
      set run_date [lindex $argv 0]
   } else {
      set run_date [clock format [clock seconds] -format "%Y%m%d"]
   }

   writeToFile $initDnldCount $initDnldFileList

}

################################################################################
#
#    Procedure Name - bailout
#
#    Description - Used to exit out from the sftp child process
#
#    Return - None
#
###############################################################################
proc bailout {error_code} {
   global loc_path

        send "bye\r"
        exit $error_code
};# end bailout


################################################################################
#
#    Procedure Name - get_files
#
#    Description - The script will do the following
#                  Login into the remote box
#                  Download all the files from the remote dir to ./DNLOAD dir
#                  Email only the Jetpay ACH Return files
#                  Delete the downloaded file from the remote box
#                  Rename the downloaded file in the local dir to
#                  <fileName>-<run_date>
#
#    Return - None
#
###############################################################################
proc get_files {} {
   global base_name
   global run_date
   global remote_dir
   global jp_file_mask
   global rt_file_mask
   global match_len
   global files_to_xfer
   global file_mask
   global dnld_dir
   global arcv_dir
   global msubj
   global email_list
   global mbody_file
   global ret_code
   global USERNAME
   global DESTINATION_MACHINE

   set timeout 30 ; #used by expect to set timeout to 30sec
   set remote_dir "in"
   set dnld_file_list ""
   set ret_code 0
   set file_count 0
   set sendFlag 0

   set USERNAME "filemgr"
   set DESTINATION_MACHINE "sftp.jetpay.com"

   spawn sftp $USERNAME@$DESTINATION_MACHINE

   while 1 {
      expect {
         "\n530*" {send_user "failed login\n"; bailout 1}
         "*ftp>"  {send_user "successful login\n";break}
         timeout  {send_user "Remote Login timed out\n"; bailout 2}
      }
   }

   set remote_dir "/secure/pstars/ach/to_jetpay"
   send "cd $remote_dir \r"

   while 1 {
      expect {
         "*ftp>"   {send_user "changed remote directory\n"; break}
         timeout   {send_user "cd command timed out"; bailout 2}
      }
   }

   ###
   ### Get JetPay  and Revtrak files
   ###
   send "lcd $dnld_dir\r"
   while 1 {
      expect {
         "*ftp>"   {send_user "changed local directory to $dnld_dir\n"; break}
         timeout   {send_user "cd command timed out"; bailout 2}
      }
   }

   send "get $files_to_xfer\r"
   #expect "sftp>"

   while 1 {
       expect {
          "Fetching*"         {send_user "File found, Transfering \n";
                               set buffer $expect_out(buffer);
                               regexp {(\w*)_returns_(\w*).(\w*)} $buffer file;
                               lappend dnld_file_list $file ;
                               incr file_count }
          "*ftp>"             {send_user "get command executed\r";break }
          "File * not found." {send_user "File not found, exiting \n";
                               bailout 3}
          timeout             {send_user "File Transfer timed out\n"; bailout 2}
       }
    }

    if { $dnld_file_list != " "} {
       puts "Files downloaded are - \n $dnld_file_list"
    } else {
       puts "ERR:No files were downloaded"
       bailout 4
    }

    ###
    ###  Email only the Jetpay ach return files to the recipients
    ###  No need to email the RevTrak returns
    ###
    set mail_script "exec mutt -s $msubj"
    foreach dnld_file $dnld_file_list {
       if {[string equal -nocase -length $match_len $dnld_file $rt_file_mask] != 1} {
          set sendFlag 1
          set mail_script "$mail_script -a"
          set mail_script "$mail_script $dnld_dir/$dnld_file"
       }
    }
    if {$sendFlag == 1} {
       set mail_script "$mail_script -- $email_list < $mbody_file"
       if {[catch {eval $mail_script} result]} {
          puts "EMail Err - $result"
          set ret_code 4
          set sendFlag 0
       }
    }

    ###  Remove the downloaded files from the remote box
    ###  Rename the downloaded files to fileName.DateStamp
    foreach dnld_file $dnld_file_list {
       if {[catch {exec mv $dnld_dir/$dnld_file "$dnld_dir/$dnld_file-$run_date"} result]} {
          puts "File Move Err : $result"
          set ret_code 5
       }

       send "rm $dnld_file\r"

       while 1 {
          expect {
             "Removing*"         {send_user "Attempting to delete $dnld_file\n"}
             "*ftp>"             {send_user "rm command\r";break}
             "Couldn't delete*"  {send_user "ERR:Could not delete $dnld_file \n";
                                  set ret_code 5 ;
                                  break}
             timeout             {send_user "rm cmd timed out\n"; bailout 2}
          }
       }
    }

    send "bye\r"

    ### Write the result to a file
    writeToFile $file_count $dnld_file_list
}

################################################################################
#
#    Procedure Name - writeToFile
#
#    Description - Writes the results (file count and file list) to an
#                  file. This file is used by the parsing script to
#                  verify if all the file downloaded get parsed into the
#                  system
#
#    Return - None
#
###############################################################################
proc writeToFile {count file_list} {
   global result_file

   if {! [catch {open $result_file w} file_ptr]} {
      puts $file_ptr "DNLD_FILE_COUNT:$count"
      puts $file_ptr "DNLD_FILE_LIST:$file_list"
   } else {
      puts "File Open Err:Cannot open $result_file"
   }

   close $file_ptr
   exec chmod 755 $result_file
}



##########
## MAIN ##
##########
init $argc $argv
get_files
exit $ret_code
