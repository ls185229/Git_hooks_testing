#!/usr/bin/env expect

# $Id: get_amex_files.exp 4911 2019-10-22 21:02:56Z bjones $

# Expect script to upload an files from AMEX
# The files uploaded are Chargeback, Inquiry, Confirmation, TILR, and BIN
#
# Version 0.0 06/05/2014 Debra Evans
#****************************************

####System information variables....
##################################################################################

set sysinfo "System: $env(SYS_BOX)\n Location: $env(PWD)\n"
set mailtolist $env(MAIL_TO)
set mailfromlist $env(MAIL_FROM)

###################################################################################
#Email Subjects variables Priority for Clearing
###################################################################################

set msubj_c "$env(SYS_BOX) :: Priority : Critical - Clearing and Settlement"

####################################################################################
#Email Body variables Priority for Assist
####################################################################################

set mbody_c "ASSIST :: \nContact On-Call Engr. \[15 minutes or Escalate\] - Open Ticket \n\n"

set logdate [clock seconds]
set logdate [clock format $logdate -format "%Y%m%d%H%M%S"]

set chgback_dnload_dir "/clearing/filemgr/AMEX/DISPUTES/CBNSP/DNLOAD"
set inquiry_dnload_dir "/clearing/filemgr/AMEX/DISPUTES/INQ02/DNLOAD"
set tilr_archive_dir "/clearing/filemgr/AMEX/SETTLEMENT/TILR/ARCHIVE"
set bin_archive_dir "/clearing/filemgr/AMEX/BIN_FILES/ARCHIVE"
set confirmation_archive_dir "/clearing/filemgr/AMEX/SETTLEMENT/ARCHIVE"
set spmerchant_response_dir "/clearing/filemgr/AMEX/MERCHANT/SPOMI/RESPONSES"
set grrcn_dnload_dir "/clearing/filemgr/AMEX/SETTLEMENT/GRRCN/DNLOAD"

set confirmation_filename "SUB004.1089*"

set settle_filename "JETPAYPRD*"

set chgback_filename "*CBNSP*"

set inquiry_filename "*INQ02*"

set tilr_filename "*EPTRN*"

set bin_filename "*PRBIN*"

set spor_filename "JETPAYPRD.SPO*"

set grrcn_filename "NCRPAYPRD.GRRCN*"

set other_filenames {"JETPAYPRD.SA*" "JETPAYPRD.SC*" "JETPAYPRD.SD*"}
set other_archive_dir "/clearing/filemgr/AMEX/ARCHIVE"

set new_balor "s02-prd-batch-v01"

set  filedate  [clock format [clock scan "-0 day"] -format %Y%m%d]

proc bailout {message error_code} {
    send "bye\r"
    expect {
        "221 Service closing control connection." {exec sleep 2; exit $error_code}
        timeout                                   {exit 99}
    }
    exit 99
};# end bailout

set return_code 0

puts "\n[clock format [clock seconds] -format "%Y/%m/%d %H:%M:%S" ] Beginning retrieval of AMEX files"

set timeout 2500

spawn connection_to_amex_prod filemgr@sftp.jetpay.com
sleep 20
while 1 { expect {
    "*sftp>"     {send_user "successful connection to AMEX\n";break}
    timeout      {send_user "Timeout problem while connecting to AMEX\n"; bailout 2}
}}

send "cd outbox \r"
sleep 20

while 1 { expect {
    "*sftp>"        {send_user "successful change directory to AMEX outbox\n"; break}
    timeout         {send_user "Timeout problem while changing directory to AMEX outbox\n"; bailout 2}
}}


set timeout 5
set confirmation_found 0
set settlement_found 0
set grrcn_found 0

puts "confirmation_found is $confirmation_found\n"

####check if we have any confirmation files today########
send "ls $confirmation_filename \r"

sleep 20

while 1 { expect {
    "*sftp>    \n"              {set confirmation_found 0; break}
    "SUB004.1089*\n"            {set confirmation_found 1; break}
    timeout                     {set confirmation_found 0; break}
}}

send_user "confirmation_found is $confirmation_found\n"

#### NO confirmation files were found ########
if {$confirmation_found == 0} {
      send_user "!!!!!! There are no confirmation files for AMEX in the secure sftp directory !!!!!!\n"
}

if {$confirmation_found == 1} {
    set timeout 2500

    send "mget $confirmation_filename \r"

    while 1 { expect {
        "*sftp>"        {send_user "successful file transfer of $confirmation_filename\n"; break}
        "mget*\?"       {send "y\r";sleep 2}
        timeout         {send_user "Timeout problem while getting $confirmation_filename for AMEX\n"; bailout 2}
    }}
}

sleep 60

send_user "grrcn_found is $grrcn_found\n"
 ####check if we have any GRRCN files today########

send "ls $grrcn_filename \r"
sleep 20
while 1 { expect {
    "*sftp>    \n"       {set grrcn_found 0; break}
    "NCRPAYPRD*\n"       {set grrcn_found 1; break}
    timeout              {set grrcn_found 0; break}
}}

send_user "grrcn_found is $grrcn_found\n"
#### NO GRRCN files were found ########
if {$grrcn_found == 0} {
    send_user "!!!!!! There are no GRRCN files for AMEX in the secure sftp directory !!!!!!\n"
}

if {$grrcn_found == 1} {
    set timeout 2500

    send "mget $grrcn_filename \r"

    while 1 { expect {
        "*sftp>"        {send_user "successful file transfer of $grrcn_filename\n"; break}
        "mget*\?"       {send "y\r";sleep 2}
        timeout         {send_user "Timeout problem while getting $grrcn_filename for AMEX\n"; bailout 2}
    }}
}

sleep 120

send_user "settlement_found is $settlement_found\n"
 ####check if we have any settlement files today########

send "ls $settle_filename \r"
sleep 20
while 1 { expect {
    "*sftp>    \n"       {set settlement_found 0; break}
    "JETPAYPRD*\n"       {set settlement_found 1; break}
    timeout              {set settlement_found 0; break}
}}

send_user "settlement_found is $settlement_found\n"
#### NO settlement files were found ########
if {$settlement_found == 0} {
    send_user "!!!!!! There are no settlement files for AMEX in the secure sftp directory !!!!!!\n"
}

if {$settlement_found == 1} {
    set timeout 2500

    send "mget $settle_filename \r"

    while 1 { expect {
        "*sftp>"        {send_user "successful file transfer of $settle_filename\n"; break}
        "mget*\?"       {send "y\r";sleep 2}
        timeout         {send_user "Timeout problem while getting $settle_filename for AMEX\n"; bailout 2}
    }}
}

sleep 300

	puts "\nEnd of retrieval of AMEX Settlement file(s) @ [clock format [clock seconds] -format "%m/%d/%y %H:%M:%S" ]\n"

    send_user "bye\n"


puts "Beginning move of all files\n"

##### MOVE CHARGEBACK FILES TO DNLOAD DIRECTORY #####

set file_is_there 0

if { [catch { set x [glob  $chgback_filename  ] } result] } {
    puts "!!!!!! There are no chargeback files for AMEX in /clearing/filemgr/AMEX directory !!!!!!\n"
} else {
    set file_is_there 1
}

if {$file_is_there == 1 } {

   foreach file $x {

        set out_filename $file

        if { [catch {file copy $out_filename "$chgback_dnload_dir/$out_filename.$filedate"} result ] } {
            puts "err returned: $result"
            puts "file copy of $out_filename to $chgback_dnload_dir/$out_filename.$filedate FAILED \n"
            } else {
            puts "file copy of $out_filename to $chgback_dnload_dir/$out_filename.$filedate successful \n"
            exec rm $out_filename
        }
    }
}

##### MOVE INQUIRY FILES TO DNLOAD DIRECTORY #####

set file_is_there 0

if { [catch { set x [glob  $inquiry_filename  ] } result] } {
         puts "!!!!!! There are no inquiry files for AMEX in /clearing/filemgr/AMEX directory !!!!!!\n"
    } else {
        set file_is_there 1
    }

if {$file_is_there == 1 } {
   foreach file $x {

        set out_filename $file

        if { [catch {file copy $out_filename "$inquiry_dnload_dir/$out_filename.$filedate"} result ] } {
            puts "err returned: $result"
            puts "file copy of $out_filename to $inquiry_dnload_dir/$out_filename.$filedate FAILED \n"
        } else {
            puts "file copy of $out_filename to $inquiry_dnload_dir/$out_filename.$filedate successful \n"
            exec rm $out_filename
        }
   }
}

##### MOVE TILR FILES TO ARCHIVE DIRECTORY #####

set file_is_there 0

if { [catch { set x [glob  $tilr_filename  ] } result] } {
    puts "!!!!!! There are no tilr files for AMEX in /clearing/filemgr/AMEX directory !!!!!!\n"
} else {
    set file_is_there 1
}

if {$file_is_there == 1 } {
    foreach file $x {

        set out_filename $file

        if { [catch {file copy $out_filename "$tilr_archive_dir/$out_filename.$filedate"} result ] } {
            puts "err returned: $result"
            puts "file copy of $out_filename to $tilr_archive_dir/$out_filename.$filedate FAILED \n"
        } else {
            puts "file copy of $out_filename to $tilr_archive_dir/$out_filename.$filedate successful \n"
            exec rm $out_filename
        }
    }
}

##### MOVE GRRCN FILES TO DNLOAD DIRECTORY #####
set file_is_there 0

if { [catch { set x [glob  $grrcn_filename  ] } result] } {
         puts "\n !!!!!! There are no grrcn files for AMEX in /clearing/filemgr/AMEX directory !!!!!!\n"
    } else {
          set file_is_there 1
    }

if {$file_is_there == 1 } {
   foreach file $x {

        set out_filename $file

        if { [catch {file copy $out_filename "$grrcn_dnload_dir/$out_filename.$filedate"} result ] } {        
            puts "err returned: $result"
            puts "\n file copy of $out_filename to $grrcn_dnload_dir/$out_filename.$filedate FAILED \n"
           } else {
            puts "\n file copy of $out_filename to $grrcn_dnload_dir/$out_filename.$filedate successful \n"
            exec rm $out_filename 
        }
   }     
}

##### MOVE CONFIRMATION FILES TO ARCHIVE DIRECTORY #####

set file_is_there 0

if { [catch { set x [glob  $confirmation_filename  ] } result] } {
    puts "!!!!!! There are no confirmation files for AMEX in /clearing/filemgr/AMEX directory !!!!!!\n"
} else {
    set file_is_there 1
}

if {$file_is_there == 1 } {
    foreach file $x {

        set out_filename $file

        if { [catch {file copy $out_filename "$confirmation_archive_dir/$out_filename"} result ] } {
            puts "err returned: $result"
            puts "file copy of $out_filename to $confirmation_archive_dir/$out_filename FAILED \n"
        } else {
            puts "file copy of $out_filename to $confirmation_archive_dir/$out_filename successful \n"
            exec rm $out_filename
        }
    }
}

##### MOVE MERCHANT RESPONSE FILES TO RESPONSE DIRECTORY #####

set file_is_there 0

if { [catch { set x [glob  $spor_filename  ] } result] } {
    puts "!!!!!! There are no sponsered merchant response files for AMEX in /clearing/filemgr/AMEX directory !!!!!!\n"
} else {
    set file_is_there 1
}

if {$file_is_there == 1 } {
    foreach file $x {

        set out_filename $file
        if { [catch {spawn scp -p $out_filename "amexxfer@$new_balor:DNLOAD/$out_filename.$filedate"} result ] } {
            puts "err returned: $result"
            puts " scp of $out_filename to amexxfer@$new_balor:DNLOAD/$out_filename.$filedate FAILED"
            incr return_code
            continue
        } else {
            puts " scp of $out_filename to amexxfer@$new_balor:DNLOAD/$out_filename.$filedate successful"
            sleep 5
        }
            
        if { [catch {file copy $out_filename "$spmerchant_response_dir/$out_filename.$filedate"} result ] } {
            puts "err returned: $result"
            puts "file copy of $out_filename to $spmerchant_response_dir/$out_filename.$filedate FAILED \n"
            incr return_code
        } else {
            puts "file copy of $out_filename to $spmerchant_response_dir/$out_filename.$filedate successful \n"
            exec rm $out_filename
        }
    }
}


##### MOVE BIN FILES TO ARCHIVE DIRECTORY #####

set file_is_there 0

if { [catch { set x [glob  $bin_filename  ] } result] } {
        puts "!!!!!! There are no bin files for AMEX in /clearing/filemgr/AMEX directory !!!!!!\n"
    } else {
        set file_is_there 1
    }

if {$file_is_there == 1 } {
   foreach file $x {

        set out_filename $file

        if { [catch {file copy $out_filename "$bin_archive_dir/$out_filename.$filedate"} result ] } {
            puts "err returned: $result"
            puts "file copy of $out_filename to $bin_archive_dir/$out_filename.$filedate FAILED \n"
        } else {
            puts "file copy of $out_filename to $bin_archive_dir/$out_filename.$filedate successful \n"
            exec rm $out_filename
        }
    }
}

foreach file_mask $other_filenames {
    ##### other FILES TO ARCHIVE DIRECTORY and copy to amexxfer@balor #####

    set file_is_there 0

    if { [catch { set x [glob  $file_mask  ] } result] } {
        puts "!!!!!! There are no extra files for AMEX in /clearing/filemgr/AMEX directory !!!!!!\n"
    } else {
        set file_is_there 1
    }

    if {$file_is_there == 1 } {
        foreach file $x {
            set out_filename $file

            if { [catch {spawn scp -p $out_filename "amexxfer@$new_balor:DNLOAD/$out_filename.$filedate"} result ] } {
                puts "err returned: $result"
                puts " scp of $out_filename to amexxfer@$new_balor:DNLOAD/$out_filename.$filedate FAILED"
                incr return_code
                continue
            } else {
                puts " scp of $out_filename to amexxfer@$new_balor:DNLOAD/$out_filename.$filedate successful"
                sleep 5
            }

            if { [catch {file copy $out_filename "$other_archive_dir/$out_filename.$filedate"} result ] } {
                puts "err returned: $result"
                puts " file copy of $out_filename to $other_archive_dir/$out_filename.$filedate FAILED"
                incr return_code
            } else {
                puts " file copy of $out_filename to $other_archive_dir/$out_filename.$filedate successful"
                exec rm $out_filename
            }
        }
    }
}

puts "\n[clock format [clock seconds] -format "%Y/%m/%d %H:%M:%S" ] Ending retrieval of AMEX files\n"

exit $return_code
