#!/usr/bin/env expect

#######################################################################################################################

#Environment veriables.......

set box $env(SYS_BOX)
set clrpath $env(CLR_OSITE_ROOT)
set maspath $env(MAS_OSITE_ROOT)
set mailtolist $env(MAIL_TO)
set mailfromlist $env(MAIL_FROM)
set clrdb $env(IST_DB)
set authdb $env(ATH_DB)

#Email Subjects variables Priority wise

set msubj_c "$box :: Priority : Critical - Clearing and Settlement"
set msubj_u "$box :: Priority : Urgent - Clearing and Settlement"
set msubj_h "$box :: Priority : High - Clearing and Settlement"
set msubj_m "$box :: Priority : Medium - Clearing and Settlement"
set msubj_l "$box :: Priority : Low - Clearing and Settlement"


#Email Body Headers variables for assist

set mbody_c "ASSIST :: \nContact On-Call Engr. \[15 minutes or Escalate\] - Open Ticket \n\n"
set mbody_u "ASSIST :: \nContact On-Call Engr. \[60 minutes or Escalate\] - Open Ticket \n\n"
set mbody_h "ASSIST :: \nInform On-Call/Available Engr. \[Day Time 7 days of the week\] - Open Ticket \n\n"
set mbody_m "ASSIST :: \nInform Available Engr. \[Day Time 5 working days of week\] - Open Ticket \n\n"
set mbody_l "ASSIST :: \nAssign Ticket to the appropriate Engr. \[24/7 - 365 days\] - Open Ticket \n\n"

#System information variables....

set sysinfo "System: $box\n Location: $env(PWD) \n\n"

#######################################################################################################################


#Checking if a process stop file exist. If process stop file exists stoping process and notifying process issue exists. If the the stop file do not exist
#create the stop file while running this script, so that other process do not start if this scripts completes successfully and removes the stop file at
#the end of the scripts.



# Setup initial variable
set DESTINATION_MACHINE eft.merrickbank.com

# These allow testing of this script
set USERNAME "jetpay"
set PASSWORD "Merrick123"


if { [llength $argv] < 2 } {
    puts "Invalid arguments.  [info script] remote_dir file_2_transfer"
    exit 1
}
set remote_dir [lindex $argv 0]
set file_2_transfer [lindex $argv 1]

set timeout_bailout 99

#log_file ftp.log
#
#if { [llength $argv] < 2 } {
#    puts "Invalid arguments.  [info script] remote_dir upload_directory file_pattern"
#    exit 1
#}
#set remote_dir [lindex $argv 0]
#set upload_directory [lindex $argv 1]
#set file_pattern [lindex $argv 2]

# Procedure to try to make sure the link is terminated cleanly so the
# ISDN line will drop quickly
proc bailout {error_code} {
        send "quit\r"
        expect {
            "221 Session terminated" {exec sleep 2; exit $error_code}
            timeout                  {exit 99}
        "*ftp>"          {exit 1}
        }
        exit 99
};# end bailout

#catch {set x [exec find $upload_directory -name $file_pattern]} result
#    puts "using find $upload_directory -name $file_pattern"
#    puts $result
#    puts "found files $x"
#    if {$x == ""} {
#    puts "NO FILES FOUND"
#    exit 0
#}

#**** Main Code Module ****



set timeout 30
spawn sftp $USERNAME@$DESTINATION_MACHINE

expect {
    "*assword:" {send "$PASSWORD\r"}
    timeout     {send_user "Timeout problem\n"; bailout 2}
}



expect {
    timeout {

        puts "Timeout waiting for ftp prompt \n"
        bailout $timeout_bailout
    }
    "*530 Login incorrect*" { puts $log_file "Login failed.\n" }
    "*ftp>" {}
}


send "cd ToMerrick/$remote_dir\r"

expect {
    timeout {

        puts "Timeout while changing directory to ToMerrick/$remote_dir \n"
        bailout $timeout_bailout
    }
    "*ftp>" {}
}

set timeout 1200
send "pwd\r"

expect {
    timeout {

        puts "Timeout waiting for ftp prompt \n"
        bailout $timeout_bailout
    }
    "*ftp>" {}
}


#foreach file_2_transfer $x {

    #puts $file_2_transfer

send "put $file_2_transfer\r"

while 1 { expect {
        "Couldn't open local file" {send_user "Couldn't open local file $file_2_transfer"; bailout 4}
        "*ftp>"     {send_user "FILE TRANSFERED\n"; break}
        timeout     {send_user "Problem transferring file\n"; bailout 4}
    }
}
#}

send "quit\r"

exit 0
