#!/usr/bin/env expect

#######################################################################################################################

#Environment veriables.......

set box $env(SYS_BOX)
set clrpath $env(CLR_OSITE_ROOT)
set maspath $env(MAS_OSITE_ROOT)
set mailtolist $env(MAIL_TO)
set mailfromlist $env(MAIL_FROM)
set clrdb $env(IST_DB)
set authdb $env(ATH_DB)

#Email Subjects variables Priority wise

set msubj_c "$box :: Priority : Critical - Clearing and Settlement"
set msubj_u "$box :: Priority : Urgent - Clearing and Settlement"
set msubj_h "$box :: Priority : High - Clearing and Settlement"
set msubj_m "$box :: Priority : Medium - Clearing and Settlement"
set msubj_l "$box :: Priority : Low - Clearing and Settlement"


#Email Body Headers variables for assist

set mbody_c "ASSIST :: \nContact On-Call Engr. \[15 minutes or Escalate\] - Open Ticket \n\n"
set mbody_u "ASSIST :: \nContact On-Call Engr. \[60 minutes or Escalate\] - Open Ticket \n\n"
set mbody_h "ASSIST :: \nInform On-Call/Available Engr. \[Day Time 7 days of the week\] - Open Ticket \n\n"
set mbody_m "ASSIST :: \nInform Available Engr. \[Day Time 5 working days of week\] - Open Ticket \n\n"
set mbody_l "ASSIST :: \nAssign Ticket to the appropriate Engr. \[24/7 - 365 days\] - Open Ticket \n\n"

#System information variables....

set sysinfo "System: $box\n Location: $env(PWD) \n\n"

#######################################################################################################################


#Checking if a process stop file exist. If process stop file exists stoping process and notifying process issue exists. If the the stop file do not exist
#create the stop file while running this script, so that other process do not start if this scripts completes successfully and removes the stop file at
#the end of the scripts.



# Setup initial variable
set DESTINATION_MACHINE eft.merrickbank.com

# These allow testing of this script
set USERNAME "isojetpaybackend"
set PASSWORD "Merrick123"

set curdate [clock seconds]
set logdate [clock format $curdate -format "%Y%m%d%H%M%S"]
#set month [format %02s [expr [clock format $curdate -format "%m"] - 1]]
set month [format %02s [expr [clock format $curdate -format "%N"] - 1]]
set year [clock format $curdate -format "%y"]
#set month "12"
#set year "12"
set curdate "$month$year"
puts $curdate


set timeout_bailout 99

log_file ftp.log

set x [subst {{"Jetpay-EB$curdate.xlsx"} Jetpay_EB_$curdate.xls {"Jetpay FDR $curdate.pdf"} Jetpay_FDR_$curdate.pdf {"Jetpay ISO's $curdate.pdf"} Jetpay_ISOs_$curdate.pdf {"Jetpay Visa MC other charges $curdate.xlsm"} visa_mc_other_charges_$curdate.xls {"Jetpay Visa MC other charges $curdate.xlsm"} visa_mc_other_charges_$curdate.xls {"Ser Fee calc $curdate.xlsm"} Ser_Fee_calc_$curdate.xls} ]

set newdir "MerrickStatements$curdate"

if {[file exists $newdir]} {
    exec mvdir $newdir dup_$logdate$newdir
    exec mkdir $newdir
} else {
    exec mkdir $newdir
}

# Procedure to try to make sure the link is terminated cleanly so the
# ISDN line will drop quickly
proc bailout {error_code} {
        send "quit\r"
        expect {
            "221 Session terminated" {exec sleep 2; exit $error_code}
            timeout                  {exit 99}
                "*ftp>"                  {exit 1}
        }
        exit 99
};# end bailout


#**** Main Code Module ****



set timeout 3000
spawn sftp $USERNAME@$DESTINATION_MACHINE

while 1 { expect {
    "*assword:" {send "$PASSWORD\r"}
    "*ftp>"     {send_user "Logged in\n"; break}
    timeout     {send_user "Timeout problem\n"; bailout 2}
}}


foreach {file_2_transfer file_rename_2} $x {

puts $file_2_transfer

send "get $file_2_transfer ./$newdir/$file_rename_2 \r"

    while 1 { expect {
                "Couldn't open local file" {send_user "Couldn't open local file $file_2_transfer"; bailout 4}
                "*ftp>"     {send_user "FILE TRANSFERED\n"; break}
                timeout     {send_user "Problem transferring file\n"; bailout 4}
    }}

}

exec zip -r $newdir.zip $newdir

after 30000

exec uuencode $newdir.zip $newdir.zip | mailx -r reports-clearing@jetpay.com -s "Merrick ISO Reports for $curdate" reports-clearing@dfw-prd-msg-01.jetpay.com accounting@jetpay.com

after 30000

catch {exec mvdir $newdir ./ARCHIVE/dn-$newdir} result
catch {exec mv $newdir.zip ./ARCHIVE/dn-$newdir.zip} result
